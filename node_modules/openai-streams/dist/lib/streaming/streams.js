import{ENCODER as S,DECODER as f}from"../../globs/shared.js";import{ChatParser as d,TokenParser as O}from"./transforms.js";import{createParser as A}from"eventsource-parser";import{pipeline as m,yieldStream as h}from"yield-stream";import{OpenAIError as y}from"../errors.js";const s=(e,{mode:r="tokens"})=>new ReadableStream({async start(a){const p=A(t=>{if(t.type==="event"){const{data:n}=t;if(n==="[DONE]"){a.close();return}try{const o=JSON.parse(n);if(a.enqueue(S.encode(n)),r==="tokens"&&o?.choices){const{choices:i}=o;for(const c of i)if(c?.finish_reason==="length")throw new y("MAX_TOKENS")}}catch(o){a.error(o)}}});for await(const t of h(e))p.feed(f.decode(t))}}),C=(e,r={mode:"tokens"})=>m(s(e,r),O),D=(e,r={mode:"tokens"})=>m(s(e,r),d);export{D as ChatStream,s as EventStream,C as TokenStream};
