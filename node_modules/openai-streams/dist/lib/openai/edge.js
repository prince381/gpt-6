import{streamArray as c}from"yield-stream";import{ENCODER as d}from"../../globs/shared.js";import{OpenAIError as n}from"../errors.js";import{ChatStream as N,EventStream as O,getTokensFromResponse as A,TokenStream as b}from"../streaming/index.js";import{OpenAIAPIEndpoints as u}from"../types.js";const C=async(r,f,{mode:o="tokens",apiKey:i=process.env.OPENAI_API_KEY}={})=>{if(!i)throw new n("NO_API_KEY");const p=r==="completions"||r==="chat",h=u[r],t=await fetch(`https://api.openai.com/v1/${h}`,{method:"POST",body:JSON.stringify({...f,stream:p?!0:void 0}),headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json",Accept:"application/json"}});if(!t.body)throw new n("UNKNOWN");let e;const s={mode:o};if(p)switch(o){case"raw":e=O(t.body,s);break;case"tokens":switch(r){case"chat":e=N(t.body,s);break;default:e=b(t.body,s);break}break;default:throw console.error(`Unknown mode: ${o} for streaming response.`),new n("UNKNOWN")}else{const a=await t.text();switch(o){case"tokens":const w=JSON.parse(a),m=A(w);if(typeof m!="string"){console.error("No text choices received from OpenAI: "+a),e=c([]);break}const l=d.encode(m);e=c([l]);break;case"raw":const k=d.encode(a);e=c([k]);break;default:throw console.error(`Unknown mode: ${o} for non-streaming response.`),new n("UNKNOWN")}}return e};export{C as OpenAI};
