/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { GeneratorFn, StreamGenerator } from "../types";
/**
 * Accepts a generator function and returns a NodeJS.ReadableStream of its
 * outputs.
 */
export declare const generateStream: <Chunk, Return, Data>(G: StreamGenerator<Data, Chunk, Return>, data?: Data | undefined) => NodeJS.ReadableStream;
/**
 * Accepts a stream and yields all of its chunks.
 */
export declare const yieldStream: <Chunk>(stream: NodeJS.ReadableStream, controller?: AbortController) => AsyncGenerator<Chunk, any, unknown>;
/**
 * Accepts a stream and transforms and returns a stream of the transformed
 * chunks. Transforms can yield multiple chunks per input chunk.
 */
export declare const pipeline: <Chunk>(stream: NodeJS.ReadableStream, ...transforms: GeneratorFn<Chunk>[]) => NodeJS.ReadableStream;
/**
 * Accepts an array and returns a stream of its items.
 */
export declare const streamArray: <Chunk>(array: Chunk[]) => NodeJS.ReadableStream;
/**
 * Accepts a stream and yields a growing buffer of all chunks received.
 */
export declare const buffer: <Chunk>(stream: NodeJS.ReadableStream) => AsyncGenerator<Chunk[], void, unknown>;
