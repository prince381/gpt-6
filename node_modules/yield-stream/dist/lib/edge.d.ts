import { GeneratorFn, StreamGenerator } from "../types";
/**
 * Accepts a generator function and streams its outputs.
 */
export declare const generateStream: <Chunk, Return, Data>(G: StreamGenerator<Data, Chunk, Return>, data?: Data | undefined) => ReadableStream<Chunk>;
/**
 * Accepts a stream and transforms and returns a stream of the transformed
 * chunks. Transforms can yield multiple chunks per input chunk.
 */
export declare const pipeline: <Chunk>(stream: ReadableStream<Chunk>, ...transforms: GeneratorFn<Chunk>[]) => ReadableStream<Chunk>;
/**
 * Accepts an array and returns a stream of its items.
 */
export declare const streamArray: <Chunk>(array: Chunk[]) => ReadableStream<Chunk>;
/**
 * Accepts a stream and yields all of its chunks.
 */
export declare const yieldStream: <Chunk>(stream: ReadableStream<Chunk>, controller?: AbortController) => AsyncGenerator<Awaited<Chunk>, void, unknown>;
/**
 * Accepts a stream and yields a growing buffer of all chunks received.
 */
export declare const buffer: <Chunk>(stream: ReadableStream<Chunk>) => AsyncGenerator<Chunk[], void, unknown>;
